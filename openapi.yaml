openapi: 3.0.3
info:
  title: Autonoma API
  description: |
    API for managing test runs and test definitions in the Autonoma platform.

    **Important Note:** Media URLs (images, videos) expire after 1 hour.
  version: 1.0.0
  contact:
    name: Autonoma Support
servers:
  - url: https://autonoma.app/api
    description: Production server
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: autonoma-client-id
      description: Client ID for authentication
    ApiSecretAuth:
      type: apiKey
      in: header
      name: autonoma-client-secret
      description: Client secret for authentication
  schemas:
    RunTestRequest:
      type: object
      required:
        - id
      properties:
        application_version_id:
          type: string
          description: Optional application version ID to use for the test run
          example: "cm7dbowr80042waka7thyjhkq"
        source:
          type: string
          description: Source of the test run request
          default: "api"
          example: "api"
    RunFolderRequest:
      type: object
      properties:
        application_version_id:
          type: string
          description: Optional application version ID to use for all tests in the folder
          example: "cm7dbowr80042waka7thyjhkq"
        source:
          type: string
          description: Source of the test run request
          default: "api"
          example: "api"
    RunTagRequest:
      type: object
      properties:
        application_version_id:
          type: string
          description: Optional application version ID to use for all tests in the folder
          example: "cm7dbowr80042waka7thyjhkq"
        source:
          type: string
          description: Source of the test run request
          default: "api"
          example: "api"
    TestFolder:
      type: object
      properties:
        id:
          type: string
          example: "cm7t223mk00154mzy2jwk2pqy"
        name:
          type: string
          example: "private-listing-hub"
    ApplicationVersion:
      type: object
      properties:
        name:
          type: string
          example: "STG"
        path:
          type: string
          example: "https://autonoma.app"
    Metadata:
      type: object
      properties:
        source:
          type: string
          example: "scheduled"
        version:
          type: string
          example: "STG"
        architecture:
          type: string
          example: "web"
        application_version_id:
          type: string
          example: "cm7dbowr80042waka7thyjhkq"
        email:
          type: string
          example: "axel@autonoma.app"
        username:
          type: string
          example: "Axel Escalada"
    Element:
      type: object
      properties:
        html:
          type: string
          example: '<input class="input c2053dbb5 c10f8401f" inputmode="email" name="username" id="username" type="text" value="" required="" autocomplete="email" autocapitalize="none" spellcheck="false" autofocus=""'
        selector:
          type: string
          example: "input#username"
    Step:
      type: object
      properties:
        id:
          type: string
          example: "cmbs5deso0001ps016az80n89"
        instruction:
          type: string
          example: "insert {{variable:QA_ADMIN_USER}} into log in input"
        interaction:
          type: string
          example: "input-text"
        output:
          type: string
          example: "input-text on element with text axel@autonoma.app"
        status:
          type: string
          enum: [passed, failed, pending]
          example: "passed"
        url:
          type: string
          example: "https://login.autonoma.app/login"
        element:
          $ref: "#/components/schemas/Element"
        image:
          type: string
          description: "Screenshot URL (expires in 1 hour)"
          example: "https://storage.googleapis.com/autonoma-media/screenshots/d8e41de595af.jpeg"
    RunTest:
      type: object
      properties:
        message:
          type: string
          example: "Test created successfully"
        url:
          type: string
          example: "https://autonoma.app/run/pby4qnbppbvimimuls4v5ajq"
        run_id:
          type: string
          example: pby4qnbppbvimimuls4v5ajq
    RunFolder:
      type: object
      properties:
        message:
          type: string
          example: "Folder with id cm9r0nog10012v301qtollv01 was scheduled to run. Since no applicationVersionID was provided, the latest version ('STG') for the application associated with the folder's tests was used."
        url:
          type: string
          example: "https://autonoma.app/run/folder/pby4qnbppbvimimuls4v5ajq"
        folder_run_id:
          type: string
          example: pby4qnbppbvimimuls4v5ajq
    RunTag:
      type: object
      properties:
        message:
          type: string
          example: "Tag with id cm9r0nog10012v301qtollv01 was scheduled to run. Since no applicationVersionID was provided, the latest version ('STG') for the application associated with the tag's tests was used."
        url:
          type: string
          example: "https://autonoma.app/run/tag/pby4qnbppbvimimuls4v5ajq"
        tag_run_id:
          type: string
          example: pby4qnbppbvimimuls4v5ajq
    TestRun:
      type: object
      properties:
        id:
          type: string
          example: "gch7uesq5h6m9xe2fdq5ddgd"
        name:
          type: string
          example: "Add 'member' to network, verify it can access the listings and remove it from the network"
        test_id:
          type: string
          example: "cm8d9gt6v000c9fe5glmyi33u"
        status:
          type: string
          enum: [pending, running, passed, failed]
          example: "pending"
        created_at:
          type: string
          format: date-time
          example: "2025-06-12T00:00:11.286Z"
        ended_at:
          type: string
          format: date-time
          example: "2025-06-12T00:00:11.286Z"
        folder_run_id:
          type: string
          nullable: true
          example: "y98cwdq4c3p3v3i68n7nay1p"
        job_run_id:
          type: string
          nullable: true
          example: null
        job_id:
          type: string
          nullable: true
          example: null
        folder:
          $ref: "#/components/schemas/TestFolder"
          nullable: true
        video_url:
          type: string
          nullable: true
          description: "Video URL (expires in 1 hour)"
          example: null
        steps:
          type: array
          items:
            $ref: "#/components/schemas/Step"
        metadata:
          $ref: "#/components/schemas/Metadata"
    Test:
      type: object
      properties:
        id:
          type: string
          example: "cmbsgljfr00fd060153r9x8ek"
        name:
          type: string
          example: "New Test 2025-06-11T21:25:47.442Z"
        created_at:
          type: string
          format: date-time
          example: "2025-06-11T21:25:47.559Z"
        folder:
          $ref: "#/components/schemas/TestFolder"
          nullable: true
        application_version:
          $ref: "#/components/schemas/ApplicationVersion"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/Step"
    Folder:
      type: object
      properties:
        id:
          type: string
          example: "cmbsgljfr00fd060153r9x8ek"
        name:
          type: string
          example: "Draft Folder"
        created_at:
          type: string
          format: date-time
          example: "2025-06-11T21:25:47.559Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-06-11T21:25:47.559Z"
        crontab:
          type: string
          example: "0 0 * * *"
        tests:
          type: array
          items:
            $ref: "#/components/schemas/FolderTest"
    FolderTest:
      type: object
      properties:
        id:
          type: string
          example: "cmbsgljfr00fd060153r9x8ek"
        name:
          type: string
          example: "New Test 2025-06-11T21:25:47.442Z"
    RunStatus:
      type: object
      properties:
        status:
          type: string
          example: "running"
        url:
          type: string
          example: "https://autonoma.app/run/cmbjp2vva000u0j01vtfu5kdj"
    FolderRunStatus:
      type: object
      properties:
        status:
          type: string
          example: "running"
        url:
          type: string
          example: "https://autonoma.app/run/folder/xt80n05xgkolyyhidswgw1z6"
    BadRequestError:
      type: object
      properties:
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "No applicationVersionID provided, and could not automatically determine an application from the tests within folder cmbsgljfr00fd060153r9x8ek. Please specify an applicationVersionID or ensure at least one test has an associated application."
    InvalidCredentialsError:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized"
        message:
          type: string
          example: "Invalid authentication credentials"
    NotFoundError:
      type: object
      properties:
        error:
          type: string
          example: "Not found"
        message:
          type: string
          example: "Resource with id `cm8d9gt6v000c9fe5glmyi33u` not found"
paths:
  /test:
    get:
      summary: List tests
      description: Retrieve a list of test definitions with optional pagination
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of tests to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
        - name: offset
          in: query
          description: Number of tests to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: steps
          in: query
          description: Include step details in response
          required: false
          schema:
            type: boolean
            example: true
        - name: folder
          in: query
          description: Retrieve tests by folder id
          required: false
          schema:
            type: string
            example: true
      responses:
        "200":
          description: List of tests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /test/{test_id}:
    get:
      summary: Get a specific test
      description: Retrieve details of a specific test definition by ID
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: test_id
          in: path
          required: true
          description: The ID of the test
          schema:
            type: string
            example: "cmbjp2vva000u0j01vtfu5kdj"
        - name: steps
          in: query
          description: Include step details in response
          required: false
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: Test details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "404":
          description: Test not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
  /test/{test_id}/run:
    post:
      summary: Run test
      description: Run a test by test ID
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: test_id
          in: path
          required: true
          description: ID of the test to run
          schema:
            type: string
            example: "g41k688vndxzt7kh4kq5m12s"
      requestBody:
        required: false
        description: "Request body (optional)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunTestRequest"
      responses:
        "200":
          description: Run creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunTest"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "404":
          description: Test not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
  /folder:
    get:
      summary: List Folders
      description: Retrieve a list of folder definitions with optional pagination
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of folders to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
        - name: offset
          in: query
          description: Number of folders to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
      responses:
        "200":
          description: List of Folders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Folder"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /folder/{folder_id}:
    get:
      summary: Get a specific folder
      description: Retrieve details of a specific folder definition by ID
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: folder_id
          in: path
          required: true
          description: The ID of the folder
          schema:
            type: string
            example: "cmbjp2vva000u0j01vtfu5kdj"
      responses:
        "200":
          description: Folder details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /folder/{folder_id}/run:
    post:
      summary: Run all tests within a folder
      description: "Executes all tests contained within the specified folder."
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: folder_id
          in: path
          required: true
          description: id of the folder to run
          schema:
            type: string
            example: "g41k688vndxzt7kh4kq5m12s"
      requestBody:
        required: false
        description: "Request body (optional)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunFolderRequest"
      responses:
        "200":
          description: Run creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunFolder"
        "400":
          description: Bad request (e.g., missing application version)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
  /tag/{tag_id}/run:
    post:
      summary: Run all tests that have the specified tag
      description: "Executes all tests that have the specified tag."
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: tag_id
          in: path
          required: true
          description: id of the tag to run
          schema:
            type: string
            example: "g41k688vndxzt7kh4kq5m12s"
      requestBody:
        required: false
        description: "Request body (optional)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunTagRequest"
      responses:
        "201":
          description: Run creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunTag"
        "400":
          description: Bad request (e.g., missing application version)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
  /run:
    get:
      summary: List test runs
      description: Retrieve a list of test runs with optional filtering and pagination
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of runs to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
        - name: offset
          in: query
          description: Number of runs to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: test
          in: query
          description: Filter by test ID
          required: false
          schema:
            type: string
            example: "cm8d9gt6v000c9fe5glmyi33u"
        - name: folder
          in: query
          description: Filter by folder ID
          required: false
          schema:
            type: string
            example: "cm7t223mk00154mzy2jwk2pqy"
        - name: status
          in: query
          description: Filter by run status
          required: false
          schema:
            type: string
            enum: [pending, running, passed, failed]
            example: "passed"
        - name: media
          in: query
          description: Include media URLs in response (expires in 1 hour)
          required: false
          schema:
            type: boolean
            example: true
        - name: steps
          in: query
          description: Include step details in response
          required: false
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: List of test runs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestRun"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /run/{run_id}:
    get:
      summary: Get a specific test run
      description: Retrieve details of a specific test run by ID
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: run_id
          in: path
          required: true
          description: The ID of the test run
          schema:
            type: string
            example: "g41k688vndxzt7kh4kq5m12s"
        - name: media
          in: query
          description: Include media URLs in response (expires in 1 hour)
          required: false
          schema:
            type: boolean
            example: true
        - name: steps
          in: query
          description: Include step details in response
          required: false
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: Test run details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRun"
        "404":
          description: Test run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /run/{run_id}/status:
    get:
      summary: Get a specific run status
      description: Retrieve just the run status
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: run_id
          in: path
          required: true
          description: The ID of the run
          schema:
            type: string
            example: "cmbjp2vva000u0j01vtfu5kdj"
      responses:
        "200":
          description: Run status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunStatus"
        "404":
          description: Run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /run/folder/{folder_run_id}/status:
    get:
      summary: Get a specific run folder status
      description: Retrieve run folder status and run status linked to folder run
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: folder_run_id
          in: path
          required: true
          description: The ID of the run folder
          schema:
            type: string
            example: "cmbjp2vva000u0j01vtfu5kdj"
      responses:
        "200":
          description: Folder run status details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderRunStatus"
        "404":
          description: Folder run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
  /application:
    post:
      summary: Create application
      description: Create a new application by uploading a file (APK for Android, ZIP for iOS) or providing web application details
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: x-platform
          in: header
          required: true
          description: Application platform type
          schema:
            type: string
            enum: [android, ios, web]
            example: "android"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Application file (APK for Android, ZIP for iOS)
                name:
                  type: string
                  description: Name of the application
                  example: "My Mobile App"
                cookies:
                  type: string
                  description: Optional cookies for web applications
                  example: "session=abc123"
                path:
                  type: string
                  description: URL path for web applications
                  example: "https://myapp.com"
                version:
                  type: string
                  description: Version string for web applications
                  example: "1.0.0"
                geolocation:
                  type: string
                  description: JSON string containing geolocation data
                  example: '{"latitude": 40.7128, "longitude": -74.0060}'
            examples:
              android_app:
                summary: Android APK Upload
                description: Example of uploading an Android APK file
                value:
                  name: "TestApiAndroid"
                  file: "@/path/to/your/app.apk"
              ios_app:
                summary: iOS ZIP Upload
                description: Example of uploading an iOS ZIP file
                value:
                  name: "TestApiIOS"
                  file: "@/Users/axel/Downloads/autonoma-bank.zip"
              web_app:
                summary: Web Application
                description: Example of creating a web application
                value:
                  name: "My Web App"
                  path: "https://myapp.com"
                  version: "1.0.0"
                  cookies: "session=abc123"
                  geolocation: '{"latitude": 40.7128, "longitude": -74.0060}'
      x-codeSamples:
        - lang: curl
          label: "Android"
          source: |
            curl --location --request POST 'https://autonoma.app/api/mobile' \
            --header 'autonoma-client-id: YOUR_CLIENT_ID' \
            --header 'autonoma-client-secret: YOUR_CLIENT_SECRET' \
            --header 'x-platform: android' \
            --form 'name=TestApiAndroid' \
            --form 'file=@"/path/to/your/app.apk"'
        - lang: curl
          label: "iOS ZIP"
          source: |
            curl --location --request POST 'https://autonoma.app/api/mobile' \
            --header 'autonoma-client-id: YOUR_CLIENT_ID' \
            --header 'autonoma-client-secret: YOUR_CLIENT_SECRET' \
            --header 'x-platform: ios' \
            --form 'name=TestApiIOS' \
            --form 'file=@"/Users/axel/Downloads/autonoma-bank.zip"'
        - lang: curl
          label: "Web Application"
          source: |
            curl --location --request POST 'https://autonoma.app/api/mobile' \
            --header 'autonoma-client-id: YOUR_CLIENT_ID' \
            --header 'autonoma-client-secret: YOUR_CLIENT_SECRET' \
            --header 'x-platform: web' \
            --form 'name=My Web App' \
            --form 'path=https://myapp.com' \
            --form 'version=1.0.0' \
            --form 'cookies=session=abc123'
        - lang: javascript
          label: "JavaScript (FormData)"
          source: |
            const formData = new FormData();
            formData.append('name', 'TestApiIOS');
            formData.append('file', fileInput.files[0]);

            fetch('https://autonoma.app/api/mobile', {
              method: 'POST',
              headers: {
                'autonoma-client-id': 'YOUR_CLIENT_ID',
                'autonoma-client-secret': 'YOUR_CLIENT_SECRET',
                'x-platform': 'ios'
              },
              body: formData
            });
        - lang: python
          label: "Python (requests)"
          source: |
            import requests

            files = {'file': open('/Users/axel/Downloads/autonoma-bank.zip', 'rb')}
            data = {'name': 'TestApiIOS'}
            headers = {
                'autonoma-client-id': 'YOUR_CLIENT_ID',
                'autonoma-client-secret': 'YOUR_CLIENT_SECRET',
                'x-platform': 'ios'
            }

            response = requests.post(
                'https://autonoma.app/api/mobile',
                files=files,
                data=data,
                headers=headers
            )
      responses:
        "200":
          description: Application created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  application_id:
                    type: string
                    example: "cm7dbowr80042waka7thyjhkq"
                  application_version_id:
                    type: string
                    example: "cm7dbowr80042waka7thyjhkr"
                  message:
                    type: string
                    example: "App uploaded successfully"
              examples:
                success_response:
                  summary: Successful upload
                  value:
                    application_id: "cm7dbowr80042waka7thyjhkq"
                    application_version_id: "cm7dbowr80042waka7thyjhkr"
                    message: "App uploaded successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
                  message:
                    type: string
                    example: "Failed to create application"
  /application/{application_id}:
    patch:
      summary: Update application version
      description: Create a new version of an existing application by uploading a new file or updating web application details
      security:
        - ApiKeyAuth: []
          ApiSecretAuth: []
      parameters:
        - name: application_id
          in: path
          required: true
          description: The ID of the application to update
          schema:
            type: string
            example: "cm7dbowr80042waka7thyjhkq"
        - name: x-platform
          in: header
          required: true
          description: Application platform type
          schema:
            type: string
            enum: [android, ios, web]
            example: "android"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Application file (APK for Android, ZIP for iOS)
                tag:
                  type: string
                  description: Version tag
                  enum: [dev, staging, production]
                  example: "staging"
                appName:
                  type: string
                  description: Updated application name
                  example: "My Mobile App v2"
                cookies:
                  type: string
                  description: Optional cookies for web applications
                  example: "session=xyz789"
                version:
                  type: string
                  description: Version string (required for web applications)
                  example: "2.0.0"
                path:
                  type: string
                  description: URL path (required for web applications)
                  example: "https://myapp.com/v2"
                geolocation:
                  type: string
                  description: JSON string containing geolocation data
                  example: '{"latitude": 40.7128, "longitude": -74.0060}'
            examples:
              update_android:
                summary: Update Android App
                description: Example of updating an Android application
                value:
                  file: "@/path/to/updated_app.apk"
                  tag: "production"
                  appName: "My Android App v2.0"
              update_ios:
                summary: Update iOS App
                description: Example of updating an iOS application
                value:
                  file: "@/Users/axel/Downloads/autonoma-bank-v2.zip"
                  tag: "staging"
                  appName: "TestApiIOS v2.0"
      x-codeSamples:
        - lang: curl
          label: "Android"
          source: |
            curl --location --request PATCH 'https://autonoma.app/api/mobile/cm7dbowr80042waka7thyjhkq' \
            --header 'autonoma-client-id: YOUR_CLIENT_ID' \
            --header 'autonoma-client-secret: YOUR_CLIENT_SECRET' \
            --header 'x-platform: android' \
            --form 'file=@"/path/to/updated_app.apk"' \
            --form 'tag=production' \
            --form 'appName=My Android App v2.0'
        - lang: curl
          label: "iOS"
          source: |
            curl --location --request PATCH 'https://autonoma.app/api/mobile/cm7dbowr80042waka7thyjhkq' \
            --header 'autonoma-client-id: YOUR_CLIENT_ID' \
            --header 'autonoma-client-secret: YOUR_CLIENT_SECRET' \
            --header 'x-platform: ios' \
            --form 'file=@"/Users/axel/Downloads/autonoma-bank-v2.zip"' \
            --form 'tag=staging' \
            --form 'appName=TestApiIOS v2.0'
        - lang: javascript
          label: "JavaScript Update"
          source: |
            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            formData.append('tag', 'production');
            formData.append('appName', 'My App v2.0');

            fetch('https://autonoma.app/api/mobile/cm7dbowr80042waka7thyjhkq', {
              method: 'PATCH',
              headers: {
                'autonoma-client-id': 'YOUR_CLIENT_ID',
                'autonoma-client-secret': 'YOUR_CLIENT_SECRET',
                'x-platform': 'ios'
              },
              body: formData
            });
      responses:
        "200":
          description: Application version created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  application_version_id:
                    type: string
                    example: "cm7dbowr80042waka7thyjhks"
                  message:
                    type: string
                    example: "App uploaded successfully"
              examples:
                update_success:
                  summary: Successful update
                  value:
                    application_version_id: "cm7dbowr80042waka7thyjhks"
                    message: "App version updated successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
                  message:
                    type: string
                    example: "Failed to create application version"
